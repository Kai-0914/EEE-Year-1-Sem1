#include <LiquidCrystal.h>
#include <Wire.h>

#define CLK_Encoder1 A4
#define CLK_Encoder2 A5

LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

const int IN1 = 2; 
const int IN2 = 10; 
const int ENA = 3;   
const int IN3 = A2; 
const int IN4 = A3;   
const int ENB = 11; 
const int irLeft = 13;
const int irRight = 12;

const int MPU_ADDR = 0x68; // MPU IMPORTANT

int16_t accelX, accelY, accelZ;
float accelX_scaled, accelY_scaled, accelZ_scaled;

unsigned long previousMillis = 0;
const unsigned long interval = 10;
int motorSpeed = 0;
volatile int counter_Encoder1 = 0; 
volatile int counter_Encoder2 = 0; 
int lastStateCLK_Encoder1;
int lastStateCLK_Encoder2;
unsigned long lastTime = 0;
volatile int lastCounter_Encoder1 = 0;
volatile int lastCounter_Encoder2 = 0;
float pulsesPerRevolution = 20.0;
float wheelCircumference = 20.15;
float distance_Encoder1 = 0.0;     
float distance_Encoder2 = 0.0; 
float timeInterval = 100.0; 
float avgDistance; 

unsigned long lastRampTime = 0;
const unsigned long rampInterval = 100;  
int motorSpeedA = 0;
int motorSpeedB = 0;

void setup() {
  lcd.begin(16, 2);
  lcd.print("3");
  delay(1000);
  lcd.clear();
  lcd.print("2");
  delay(1000);
  lcd.clear();
  lcd.print("1");
  delay(1000);
  lcd.clear();
  pinMode(CLK_Encoder1, INPUT);
  pinMode(CLK_Encoder2, INPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENB, OUTPUT);
  pinMode(irLeft, INPUT);
  pinMode(irRight, INPUT);

  Wire.begin();
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x6B);
  Wire.write(0x00);
  Wire.endTransmission();

  Serial.begin(115200);
  Serial.println("Go!");
  analogWrite(ENA, motorSpeed);
  analogWrite(ENB, motorSpeed);
  lastStateCLK_Encoder1 = digitalRead(CLK_Encoder1);
  lastStateCLK_Encoder2 = digitalRead(CLK_Encoder2);
}

void readMPU6050() {
  Wire.beginTransmission(MPU_ADDR);
  Wire.write(0x3B);
  Wire.endTransmission(false);
  Wire.requestFrom(MPU_ADDR, 6, true);

  accelX = Wire.read() << 8 | Wire.read();
  accelY = Wire.read() << 8 | Wire.read();
  accelZ = Wire.read() << 8 | Wire.read();

  accelX_scaled = accelX / 16384.0;
  accelY_scaled = accelY / 16384.0;
  accelZ_scaled = accelZ / 16384.0;
}

void loop() {
  static unsigned long lastPrintTime = 0;
  unsigned long currentMillis = millis();
  int isLeftDetected = digitalRead(irLeft);
  int isRightDetected = digitalRead(irRight);
  readMPU6050();
  float tiltAngle = (atan2(accelY_scaled, accelZ_scaled) * 180 / 3.142) * -1;
  float tiltUpThreshold = 20.0;
  float tiltDownThreshold = -20.0;

  if (currentMillis - lastPrintTime >= 100) {
    lastPrintTime = currentMillis;

    // Serial prints for system status
    Serial.print("Tilt Angle: ");
    Serial.println(tiltAngle);

    Serial.print("L Sensor: ");
    Serial.println(isLeftDetected ? "Detected" : "Not Detected");

    Serial.print("R Sensor: ");
    Serial.println(isRightDetected ? "Detected" : "Not Detected");

    Serial.print("Motor A Speed: ");
    Serial.println(motorSpeedA);

    Serial.print("Motor B Speed: ");
    Serial.println(motorSpeedB);

    Serial.println("---------------------");
  }

  if (tiltAngle > tiltUpThreshold) {
    motorSpeedA = 255;
    motorSpeedB = 255;

    analogWrite(ENA, motorSpeedA);
    analogWrite(ENB, motorSpeedB);

    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);

  } else if (tiltAngle < tiltDownThreshold) {
    motorSpeedA = 0;
    motorSpeedB = 0;

    analogWrite(ENA, motorSpeedA);
    analogWrite(ENB, motorSpeedB);

    digitalWrite(IN1, HIGH);
    digitalWrite(IN2, LOW);
    digitalWrite(IN3, HIGH);
    digitalWrite(IN4, LOW);

  } else {

    if (!isLeftDetected && !isRightDetected) {
      motorSpeedA = 0;
      motorSpeedB = 0;
      analogWrite(ENA, motorSpeedA);
      analogWrite(ENB, motorSpeedB);
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, LOW);
      digitalWrite(IN3, LOW);
      digitalWrite(IN4, LOW);
      return;
    }

    if (isLeftDetected) {
      motorSpeedA = 90; 
      analogWrite(ENA, motorSpeedA);
      digitalWrite(IN1, HIGH);
      digitalWrite(IN2, LOW);

    } else {
      motorSpeedA = 255; 
      analogWrite(ENA, motorSpeedA);
      digitalWrite(IN1, LOW);
      digitalWrite(IN2, HIGH);
    }

    if (isRightDetected) {
      motorSpeedB = 90;
      analogWrite(ENB, motorSpeedB);
      digitalWrite(IN3, HIGH);
      digitalWrite(IN4, LOW);
    } else {
      motorSpeedB = 255; 
      analogWrite(ENB, motorSpeedB);
      digitalWrite(IN3, LOW);
      digitalWrite(IN4, HIGH);
    }
  }
}
